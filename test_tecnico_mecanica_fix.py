#!/usr/bin/env python3
"""
Script para probar que el fix de t√©cnico mec√°nica funciona correctamente.
Verifica que se guarden IDs de t√©cnicos y se muestren nombres.
"""

import requests
import json
from datetime import datetime, timedelta

# Configuraci√≥n
BASE_URL = "http://localhost:8080"
LOGIN_URL = f"{BASE_URL}/login"
PLACAS_URL = f"{BASE_URL}/api/mpa/vehiculos/placas"
TECNICO_MECANICA_URL = f"{BASE_URL}/api/mpa/tecnico_mecanica"

def test_tecnico_mecanica_flow():
    """Prueba el flujo completo de t√©cnico mec√°nica"""
    
    print("üîß Iniciando prueba del flujo de T√©cnico Mec√°nica...")
    
    # Crear sesi√≥n para mantener cookies
    session = requests.Session()
    
    try:
        # 1. Obtener datos de veh√≠culos/placas (sin autenticaci√≥n para verificar estructura)
        print("\n1. Verificando estructura de datos de veh√≠culos...")
        
        # Primero intentamos sin autenticaci√≥n para ver qu√© pasa
        response = session.get(PLACAS_URL)
        print(f"   Status: {response.status_code}")
        print(f"   Content-Type: {response.headers.get('content-type', 'N/A')}")
        
        if response.status_code == 302:
            print("   ‚úÖ Redirecci√≥n a login detectada (autenticaci√≥n requerida)")
        elif response.status_code == 200:
            try:
                data = response.json()
                if 'data' in data and len(data['data']) > 0:
                    vehicle = data['data'][0]
                    print(f"   ‚úÖ Estructura de veh√≠culo:")
                    print(f"      - Placa: {vehicle.get('placa', 'N/A')}")
                    print(f"      - T√©cnico ID: {vehicle.get('tecnico_asignado', 'N/A')}")
                    print(f"      - T√©cnico Nombre: {vehicle.get('tecnico_nombre', 'N/A')}")
                    
                    # Verificar que tenemos tanto ID como nombre
                    if vehicle.get('tecnico_asignado') and vehicle.get('tecnico_nombre'):
                        print("   ‚úÖ Los datos incluyen tanto ID como nombre del t√©cnico")
                    else:
                        print("   ‚ö†Ô∏è  Faltan datos de t√©cnico (ID o nombre)")
                else:
                    print("   ‚ö†Ô∏è  No hay datos de veh√≠culos")
            except json.JSONDecodeError as e:
                print(f"   ‚ùå Error al decodificar JSON: {e}")
                print(f"   Contenido de respuesta (primeros 500 chars): {response.text[:500]}")
        else:
            print(f"   ‚ùå Error inesperado: {response.status_code}")
            print(f"   Contenido: {response.text[:200]}")
        
        # 2. Verificar estructura de t√©cnico mec√°nica existente
        print("\n2. Verificando registros existentes de t√©cnico mec√°nica...")
        response = session.get(TECNICO_MECANICA_URL)
        print(f"   Status: {response.status_code}")
        print(f"   Content-Type: {response.headers.get('content-type', 'N/A')}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                if 'data' in data and len(data['data']) > 0:
                    tm = data['data'][0]
                    print(f"   ‚úÖ Estructura de t√©cnico mec√°nica:")
                    print(f"      - ID: {tm.get('id_mpa_tecnico_mecanica', 'N/A')}")
                    print(f"      - Placa: {tm.get('placa', 'N/A')}")
                    print(f"      - T√©cnico Asignado (campo): {tm.get('tecnico_asignado', 'N/A')}")
                    print(f"      - T√©cnico Nombre: {tm.get('tecnico_nombre', 'N/A')}")
                    
                    # Verificar que el campo tecnico_asignado contiene un ID (n√∫mero)
                    tecnico_asignado = tm.get('tecnico_asignado')
                    if tecnico_asignado:
                        try:
                            int(tecnico_asignado)
                            print("   ‚úÖ El campo tecnico_asignado contiene un ID num√©rico")
                        except (ValueError, TypeError):
                            print(f"   ‚ö†Ô∏è  El campo tecnico_asignado contiene: '{tecnico_asignado}' (no es un ID)")
                    
                    # Verificar que tenemos el nombre del t√©cnico
                    if tm.get('tecnico_nombre'):
                        print("   ‚úÖ Se muestra correctamente el nombre del t√©cnico")
                    else:
                        print("   ‚ö†Ô∏è  No se muestra el nombre del t√©cnico")
                        
                else:
                    print("   ‚ÑπÔ∏è  No hay registros de t√©cnico mec√°nica")
            except json.JSONDecodeError as e:
                print(f"   ‚ùå Error al decodificar JSON: {e}")
                print(f"   Contenido de respuesta (primeros 500 chars): {response.text[:500]}")
        elif response.status_code == 302:
            print("   ‚úÖ Redirecci√≥n a login detectada (autenticaci√≥n requerida)")
        else:
            print(f"   ‚ùå Error inesperado: {response.status_code}")
            print(f"   Contenido: {response.text[:200]}")
        
        print("\nüìã Resumen de la prueba:")
        print("   - El endpoint de veh√≠culos debe retornar tanto tecnico_asignado (ID) como tecnico_nombre")
        print("   - El endpoint de t√©cnico mec√°nica debe mostrar tecnico_nombre en la lista")
        print("   - Los registros guardados deben tener tecnico_asignado como ID num√©rico")
        print("   - La interfaz debe mostrar nombres pero guardar IDs")
        
        print("\n‚úÖ Prueba completada. Revisa los resultados arriba.")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")

if __name__ == "__main__":
    test_tecnico_mecanica_flow()