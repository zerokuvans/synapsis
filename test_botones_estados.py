#!/usr/bin/env python3
"""
Script para verificar el funcionamiento de los botones de cambio de estado
en el m√≥dulo de devoluciones de dotaci√≥n.
"""

import requests
import json
from datetime import datetime

def test_botones_estados():
    """Prueba la funcionalidad de los botones de cambio de estado"""
    
    base_url = "http://localhost:8080"
    
    print("üîç VERIFICANDO FUNCIONALIDAD DE BOTONES DE ESTADO")
    print("=" * 60)
    
    # 1. Verificar que la p√°gina principal carga
    try:
        response = requests.get(f"{base_url}/logistica/devoluciones_dotacion")
        if response.status_code == 200:
            print("‚úÖ P√°gina principal carga correctamente")
            
            # Verificar que contiene los elementos necesarios
            content = response.text
            elementos_requeridos = [
                "modalDetallesDevolucion",
                "botonesTransicion", 
                "cargarBotonesTransicion",
                "confirmarCambioEstado",
                "EN_REVISION",
                "modalConfirmarCambio"
            ]
            
            elementos_encontrados = []
            elementos_faltantes = []
            
            for elemento in elementos_requeridos:
                if elemento in content:
                    elementos_encontrados.append(elemento)
                    print(f"  ‚úÖ {elemento}")
                else:
                    elementos_faltantes.append(elemento)
                    print(f"  ‚ùå {elemento}")
            
            print(f"\nüìä Elementos encontrados: {len(elementos_encontrados)}/{len(elementos_requeridos)}")
            
            if elementos_faltantes:
                print(f"‚ö†Ô∏è  Elementos faltantes: {', '.join(elementos_faltantes)}")
            
        else:
            print(f"‚ùå Error al cargar p√°gina: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # 2. Verificar API de devoluciones
    try:
        response = requests.get(f"{base_url}/api/devoluciones/listar")
        if response.status_code == 200:
            data = response.json()
            print(f"\n‚úÖ API de devoluciones funciona - {len(data.get('devoluciones', []))} registros")
            
            # Verificar si hay devoluciones para probar
            devoluciones = data.get('devoluciones', [])
            if devoluciones:
                primera_devolucion = devoluciones[0]
                print(f"  üìã Primera devoluci√≥n: ID {primera_devolucion.get('id')} - Estado: {primera_devolucion.get('estado')}")
                
                # Verificar estados disponibles
                estados_encontrados = set()
                for dev in devoluciones:
                    estados_encontrados.add(dev.get('estado'))
                
                print(f"  üîÑ Estados encontrados: {', '.join(sorted(estados_encontrados))}")
                
                return True
            else:
                print("  ‚ö†Ô∏è  No hay devoluciones registradas para probar")
                return True
        else:
            print(f"‚ùå Error en API de devoluciones: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al verificar API: {e}")
        return False

def verificar_estructura_modal():
    """Verifica que la estructura del modal est√© correcta"""
    
    print("\nüîç VERIFICANDO ESTRUCTURA DEL MODAL")
    print("=" * 40)
    
    try:
        response = requests.get("http://localhost:8080/logistica/devoluciones_dotacion")
        content = response.text
        
        # Verificar elementos del modal
        elementos_modal = [
            'id="modalDetallesDevolucion"',
            'id="botonesTransicion"',
            'id="modalConfirmarCambio"',
            'cargarGestionEstados',
            'function cargarBotonesTransicion',
            'estadosPermitidos'
        ]
        
        for elemento in elementos_modal:
            if elemento in content:
                print(f"‚úÖ {elemento}")
            else:
                print(f"‚ùå {elemento}")
        
        # Verificar configuraci√≥n de estados
        if "'EN_REVISION': ['APROBADA', 'RECHAZADA']" in content:
            print("‚úÖ Configuraci√≥n de transiciones de estados correcta")
        else:
            print("‚ùå Configuraci√≥n de transiciones de estados incorrecta")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error al verificar estructura: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO VERIFICACI√ìN DE BOTONES DE ESTADO")
    print("=" * 60)
    print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Ejecutar pruebas
    resultado1 = test_botones_estados()
    resultado2 = verificar_estructura_modal()
    
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    if resultado1 and resultado2:
        print("‚úÖ TODAS LAS VERIFICACIONES PASARON")
        print("\nüéØ INSTRUCCIONES PARA VER LOS BOTONES:")
        print("1. Ve a: http://localhost:8080/logistica/devoluciones_dotacion")
        print("2. Haz clic en el bot√≥n 'Ver/Editar Detalles' (üëÅÔ∏è) de cualquier devoluci√≥n")
        print("3. En el modal que se abre, busca la secci√≥n 'Gesti√≥n de Estados'")
        print("4. Ah√≠ ver√°s los botones para cambiar estado (ej: 'Cambiar a EN_REVISION')")
        print("5. Los botones disponibles dependen del estado actual de la devoluci√≥n")
        
        print("\nüîÑ ESTADOS Y TRANSICIONES DISPONIBLES:")
        print("‚Ä¢ REGISTRADA ‚Üí EN_REVISION, RECHAZADA")
        print("‚Ä¢ EN_REVISION ‚Üí APROBADA, RECHAZADA") 
        print("‚Ä¢ APROBADA ‚Üí COMPLETADA")
        print("‚Ä¢ RECHAZADA ‚Üí (sin transiciones)")
        print("‚Ä¢ COMPLETADA ‚Üí (sin transiciones)")
        
    else:
        print("‚ùå ALGUNAS VERIFICACIONES FALLARON")
        print("Revisa los errores mostrados arriba")

if __name__ == "__main__":
    main()