#!/usr/bin/env python3
"""
Script para probar las APIs del m√≥dulo MPA Veh√≠culos
"""

import requests
import json
from datetime import datetime

# Configuraci√≥n base
BASE_URL = "http://127.0.0.1:5000"
session = requests.Session()

def test_login():
    """Probar el login para obtener sesi√≥n"""
    print("üîê Probando login...")
    
    login_data = {
        'username': '80833959',  # Usuario administrativo de ejemplo
        'password': 'admin123'   # Contrase√±a de ejemplo
    }
    
    response = session.post(f"{BASE_URL}/login", data=login_data)
    
    if response.status_code == 200:
        print("‚úÖ Login exitoso")
        return True
    else:
        print(f"‚ùå Error en login: {response.status_code}")
        print(f"Respuesta: {response.text}")
        return False

def test_get_tecnicos():
    """Probar endpoint para obtener t√©cnicos"""
    print("\nüë• Probando endpoint de t√©cnicos...")
    
    response = session.get(f"{BASE_URL}/api/mpa/tecnicos")
    
    if response.status_code == 200:
        tecnicos = response.json()
        print(f"‚úÖ T√©cnicos obtenidos: {len(tecnicos)} registros")
        if tecnicos:
            print(f"   Ejemplo: {tecnicos[0]['nombre']} (ID: {tecnicos[0]['id']})")
        return True
    else:
        print(f"‚ùå Error al obtener t√©cnicos: {response.status_code}")
        print(f"Respuesta: {response.text}")
        return False

def test_get_vehiculos():
    """Probar endpoint para obtener veh√≠culos"""
    print("\nüöó Probando endpoint de veh√≠culos...")
    
    response = session.get(f"{BASE_URL}/api/mpa/vehiculos")
    
    if response.status_code == 200:
        vehiculos = response.json()
        print(f"‚úÖ Veh√≠culos obtenidos: {len(vehiculos)} registros")
        return vehiculos
    else:
        print(f"‚ùå Error al obtener veh√≠culos: {response.status_code}")
        print(f"Respuesta: {response.text}")
        return None

def test_create_vehiculo():
    """Probar creaci√≥n de veh√≠culo"""
    print("\n‚ûï Probando creaci√≥n de veh√≠culo...")
    
    vehiculo_data = {
        'cedula_propietario': '12345678',
        'nombre_propietario': 'Juan P√©rez Test',
        'placa': 'TEST123',
        'tipo_vehiculo': 'Moto',
        'vin': 'VIN123456789TEST',
        'numero_de_motor': 'MOTOR123TEST',
        'fecha_de_matricula': '2024-01-15',
        'estado': 'Activo',
        'marca': 'Honda',
        'linea': 'CB150',
        'modelo': '2024',
        'color': 'Rojo',
        'kilometraje_actual': '1000',
        'tecnico_asignado': '1',  # ID del t√©cnico
        'observaciones': 'Veh√≠culo de prueba para testing'
    }
    
    response = session.post(f"{BASE_URL}/api/mpa/vehiculos", data=vehiculo_data)
    
    if response.status_code == 201:
        vehiculo = response.json()
        print(f"‚úÖ Veh√≠culo creado exitosamente: ID {vehiculo['id']}")
        return vehiculo['id']
    else:
        print(f"‚ùå Error al crear veh√≠culo: {response.status_code}")
        print(f"Respuesta: {response.text}")
        return None

def test_get_vehiculo_detail(vehiculo_id):
    """Probar obtener detalle de veh√≠culo"""
    print(f"\nüîç Probando detalle de veh√≠culo ID {vehiculo_id}...")
    
    response = session.get(f"{BASE_URL}/api/mpa/vehiculos/{vehiculo_id}")
    
    if response.status_code == 200:
        vehiculo = response.json()
        print(f"‚úÖ Detalle obtenido: {vehiculo['placa']} - {vehiculo['marca']}")
        return True
    else:
        print(f"‚ùå Error al obtener detalle: {response.status_code}")
        return False

def test_update_vehiculo(vehiculo_id):
    """Probar actualizaci√≥n de veh√≠culo"""
    print(f"\n‚úèÔ∏è Probando actualizaci√≥n de veh√≠culo ID {vehiculo_id}...")
    
    update_data = {
        'kilometraje_actual': '2000',
        'observaciones': 'Veh√≠culo actualizado en testing'
    }
    
    response = session.put(f"{BASE_URL}/api/mpa/vehiculos/{vehiculo_id}", data=update_data)
    
    if response.status_code == 200:
        print("‚úÖ Veh√≠culo actualizado exitosamente")
        return True
    else:
        print(f"‚ùå Error al actualizar veh√≠culo: {response.status_code}")
        print(f"Respuesta: {response.text}")
        return False

def test_delete_vehiculo(vehiculo_id):
    """Probar eliminaci√≥n de veh√≠culo"""
    print(f"\nüóëÔ∏è Probando eliminaci√≥n de veh√≠culo ID {vehiculo_id}...")
    
    response = session.delete(f"{BASE_URL}/api/mpa/vehiculos/{vehiculo_id}")
    
    if response.status_code == 200:
        print("‚úÖ Veh√≠culo eliminado exitosamente")
        return True
    else:
        print(f"‚ùå Error al eliminar veh√≠culo: {response.status_code}")
        print(f"Respuesta: {response.text}")
        return False

def main():
    """Funci√≥n principal para ejecutar todas las pruebas"""
    print("üöÄ Iniciando pruebas del m√≥dulo MPA Veh√≠culos")
    print("=" * 50)
    
    # Probar login (comentado porque requiere credenciales v√°lidas)
    # if not test_login():
    #     print("‚ùå No se pudo hacer login. Continuando sin autenticaci√≥n...")
    
    # Probar endpoints
    test_get_tecnicos()
    vehiculos = test_get_vehiculos()
    
    # Probar CRUD completo
    vehiculo_id = test_create_vehiculo()
    if vehiculo_id:
        test_get_vehiculo_detail(vehiculo_id)
        test_update_vehiculo(vehiculo_id)
        test_delete_vehiculo(vehiculo_id)
    
    print("\n" + "=" * 50)
    print("üèÅ Pruebas completadas")

if __name__ == "__main__":
    main()