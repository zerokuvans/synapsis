#!/usr/bin/env python3
"""
Script para probar la funcionalidad de bloqueo de campos en el m√≥dulo de analistas.
Este script verifica que los campos se bloqueen correctamente despu√©s del guardado.
"""

import requests
import time
import json

# Configuraci√≥n
BASE_URL = "http://192.168.80.39:8080"
LOGIN_URL = f"{BASE_URL}/"
TECNICOS_URL = f"{BASE_URL}/api/analistas/tecnicos-asignados"
ACTUALIZAR_URL = f"{BASE_URL}/api/asistencia/actualizar-campo"

# Credenciales de prueba
USERNAME = "analista"
PASSWORD = "analista123"

def login():
    """Realizar login y obtener la sesi√≥n"""
    session = requests.Session()
    
    # Hacer login
    login_data = {
        'username': USERNAME,
        'password': PASSWORD
    }
    
    response = session.post(LOGIN_URL, data=login_data)
    
    if response.status_code == 200:
        print("‚úÖ Login exitoso")
        return session
    else:
        print(f"‚ùå Error en login: {response.status_code}")
        return None

def obtener_tecnicos(session):
    """Obtener lista de t√©cnicos asignados"""
    response = session.get(TECNICOS_URL)
    
    if response.status_code == 200:
        data = response.json()
        if data.get('success'):
            tecnicos = data.get('tecnicos', [])
            print(f"‚úÖ Obtenidos {len(tecnicos)} t√©cnicos")
            return tecnicos
        else:
            print(f"‚ùå Error en respuesta: {data.get('error')}")
            return []
    else:
        print(f"‚ùå Error al obtener t√©cnicos: {response.status_code}")
        return []

def probar_guardado_y_bloqueo(session, cedula):
    """Probar el guardado de datos y verificar que se bloqueen los campos"""
    print(f"\nüîß Probando guardado y bloqueo para t√©cnico {cedula}")
    
    # Datos de prueba
    hora_inicio = "08:30"
    estado = "CUMPLE"
    novedad = "T√©cnico presente y operativo"
    
    # Guardar hora_inicio
    response1 = session.post(ACTUALIZAR_URL, json={
        'cedula': cedula,
        'campo': 'hora_inicio',
        'valor': hora_inicio
    })
    
    # Guardar estado
    response2 = session.post(ACTUALIZAR_URL, json={
        'cedula': cedula,
        'campo': 'estado',
        'valor': estado
    })
    
    # Guardar novedad
    response3 = session.post(ACTUALIZAR_URL, json={
        'cedula': cedula,
        'campo': 'novedad',
        'valor': novedad
    })
    
    # Verificar respuestas
    if all(r.status_code == 200 for r in [response1, response2, response3]):
        print(f"‚úÖ Datos guardados exitosamente para t√©cnico {cedula}")
        print(f"   - Hora inicio: {hora_inicio}")
        print(f"   - Estado: {estado}")
        print(f"   - Novedad: {novedad}")
        
        # Verificar que los datos se guardaron
        tecnicos_actualizados = obtener_tecnicos(session)
        tecnico_actualizado = next((t for t in tecnicos_actualizados if t['cedula'] == cedula), None)
        
        if tecnico_actualizado:
            asistencia = tecnico_actualizado.get('asistencia_hoy', {})
            hora_guardada = asistencia.get('hora_inicio', '')
            estado_guardado = asistencia.get('estado', '')
            novedad_guardada = asistencia.get('novedad', '')
            
            print(f"‚úÖ Verificaci√≥n de datos guardados:")
            print(f"   - Hora inicio guardada: {hora_guardada}")
            print(f"   - Estado guardado: {estado_guardado}")
            print(f"   - Novedad guardada: {novedad_guardada}")
            
            # Verificar que todos los campos est√°n completos (esto deber√≠a activar el bloqueo en el frontend)
            if hora_guardada and estado_guardado and novedad_guardada:
                print(f"‚úÖ Todos los campos est√°n completos para t√©cnico {cedula}")
                print(f"   üîí Los campos deber√≠an estar BLOQUEADOS en el frontend")
                return True
            else:
                print(f"‚ö†Ô∏è  Algunos campos est√°n vac√≠os, no se deber√≠a bloquear")
                return False
        else:
            print(f"‚ùå No se encontr√≥ el t√©cnico {cedula} en la respuesta actualizada")
            return False
    else:
        print(f"‚ùå Error al guardar datos para t√©cnico {cedula}")
        for i, response in enumerate([response1, response2, response3], 1):
            if response.status_code != 200:
                print(f"   - Error en guardado {i}: {response.status_code}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando prueba de funcionalidad de bloqueo de campos")
    print("=" * 60)
    
    # Login
    session = login()
    if not session:
        return
    
    # Obtener t√©cnicos
    tecnicos = obtener_tecnicos(session)
    if not tecnicos:
        return
    
    # Probar con el primer t√©cnico que no tenga datos completos
    tecnico_prueba = None
    for tecnico in tecnicos:
        asistencia = tecnico.get('asistencia_hoy', {})
        hora = asistencia.get('hora_inicio', '')
        estado = asistencia.get('estado', '')
        novedad = asistencia.get('novedad', '')
        
        # Buscar un t√©cnico que no tenga todos los campos completos
        if not (hora and estado and novedad):
            tecnico_prueba = tecnico
            break
    
    if tecnico_prueba:
        cedula = tecnico_prueba['cedula']
        nombre = tecnico_prueba['tecnico']
        print(f"\nüìã T√©cnico seleccionado para prueba:")
        print(f"   - C√©dula: {cedula}")
        print(f"   - Nombre: {nombre}")
        
        # Probar guardado y bloqueo
        exito = probar_guardado_y_bloqueo(session, cedula)
        
        if exito:
            print(f"\n‚úÖ PRUEBA EXITOSA")
            print(f"   Los datos se guardaron correctamente para el t√©cnico {cedula}")
            print(f"   üîí Los campos deber√≠an estar BLOQUEADOS en el frontend")
            print(f"   üì± Abre el navegador en: {BASE_URL}/analistas/inicio-operacion-tecnicos")
            print(f"   üîç Busca el t√©cnico {cedula} y verifica que los campos est√©n deshabilitados")
        else:
            print(f"\n‚ùå PRUEBA FALLIDA")
            print(f"   Hubo un error al guardar o verificar los datos")
    else:
        print(f"\n‚ö†Ô∏è  No se encontr√≥ ning√∫n t√©cnico con campos incompletos para probar")
        print(f"   Todos los t√©cnicos ya tienen sus datos completos y bloqueados")
    
    print("\n" + "=" * 60)
    print("üèÅ Prueba completada")

if __name__ == "__main__":
    main()