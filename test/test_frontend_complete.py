#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
from datetime import datetime
import pytz

# Configuraci√≥n
BASE_URL = "http://localhost:8080"
LOGIN_DATA = {
    'username': '80833959',
    'password': 'M4r14l4r@'
}

def test_frontend_complete():
    print("üß™ Prueba completa del flujo de edici√≥n de asistencia")
    print("=" * 60)
    
    # Crear sesi√≥n
    session = requests.Session()
    
    # 1. Login
    print("1Ô∏è‚É£ Realizando login...")
    response = session.post(f"{BASE_URL}/", data=LOGIN_DATA)
    if response.status_code == 200:
        print("‚úÖ Login exitoso")
    else:
        print(f"‚ùå Error en login: {response.status_code}")
        return
    
    # 2. Obtener supervisores disponibles
    print("\n2Ô∏è‚É£ Obteniendo supervisores...")
    response = session.get(f"{BASE_URL}/api/supervisores")
    if response.status_code == 200:
        data = response.json()
        if data.get('success'):
            supervisores = data.get('supervisores', [])
            print(f"‚úÖ Supervisores obtenidos: {len(supervisores)}")
            if supervisores:
                supervisor_test = supervisores[0]
                print(f"   Usando supervisor: {supervisor_test}")
            else:
                print("‚ùå No hay supervisores disponibles")
                return
        else:
            print(f"‚ùå Error en respuesta: {data.get('message')}")
            return
    else:
        print(f"‚ùå Error al obtener supervisores: {response.status_code}")
        return
    
    # 3. Consultar registros de asistencia (simular frontend)
    print("\n3Ô∏è‚É£ Consultando registros de asistencia...")
    fecha_hoy = datetime.now().strftime('%Y-%m-%d')
    
    response = session.get(f"{BASE_URL}/api/asistencia/consultar", 
                          params={'supervisor': supervisor_test, 'fecha': fecha_hoy})
    
    if response.status_code == 200:
        data = response.json()
        if data.get('success'):
            registros = data.get('registros', [])
            print(f"‚úÖ Registros obtenidos: {len(registros)}")
            
            if registros:
                # Mostrar el primer registro con todos sus campos
                primer_registro = registros[0]
                print(f"\nüìã Primer registro:")
                print(f"   C√©dula: {primer_registro.get('cedula')}")
                print(f"   T√©cnico: {primer_registro.get('tecnico')}")
                print(f"   Hora inicio: {primer_registro.get('hora_inicio', 'No definida')}")
                print(f"   Estado: {primer_registro.get('estado', 'No definido')}")
                print(f"   Novedad: {primer_registro.get('novedad', 'No definida')}")
                print(f"   Carpeta d√≠a: {primer_registro.get('carpeta_dia', 'No definida')}")
                
                # 4. Probar actualizaci√≥n de campos
                cedula_test = primer_registro.get('cedula')
                if cedula_test:
                    print(f"\n4Ô∏è‚É£ Probando actualizaci√≥n para c√©dula: {cedula_test}")
                    
                    # Actualizar hora_inicio
                    print("   üìù Actualizando hora_inicio...")
                    update_data = {
                        'cedula': cedula_test,
                        'campo': 'hora_inicio',
                        'valor': '14:30'
                    }
                    headers = {'Content-Type': 'application/json'}
                    response = session.post(f"{BASE_URL}/api/asistencia/actualizar-campo", 
                                          json=update_data, headers=headers)
                    
                    if response.status_code == 200:
                        print("   ‚úÖ Hora inicio actualizada exitosamente")
                    else:
                        print(f"   ‚ùå Error actualizando hora inicio: {response.status_code}")
                        print(f"   Respuesta: {response.text}")
                    
                    # Actualizar estado
                    print("   üìù Actualizando estado...")
                    update_data = {
                        'cedula': cedula_test,
                        'campo': 'estado',
                        'valor': 'CUMPLE'
                    }
                    response = session.post(f"{BASE_URL}/api/asistencia/actualizar-campo", 
                                          json=update_data, headers=headers)
                    
                    if response.status_code == 200:
                        print("   ‚úÖ Estado actualizado exitosamente")
                    else:
                        print(f"   ‚ùå Error actualizando estado: {response.status_code}")
                        print(f"   Respuesta: {response.text}")
                    
                    # Actualizar novedad
                    print("   üìù Actualizando novedad...")
                    update_data = {
                        'cedula': cedula_test,
                        'campo': 'novedad',
                        'valor': 'Prueba de edici√≥n completa'
                    }
                    response = session.post(f"{BASE_URL}/api/asistencia/actualizar-campo", 
                                          json=update_data, headers=headers)
                    
                    if response.status_code == 200:
                        print("   ‚úÖ Novedad actualizada exitosamente")
                    else:
                        print(f"   ‚ùå Error actualizando novedad: {response.status_code}")
                        print(f"   Respuesta: {response.text}")
                    
                    # 5. Verificar que los cambios se reflejen en la consulta
                    print("\n5Ô∏è‚É£ Verificando cambios en nueva consulta...")
                    response = session.get(f"{BASE_URL}/api/asistencia/consultar", 
                                          params={'supervisor': supervisor_test, 'fecha': fecha_hoy})
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('success'):
                            registros_actualizados = data.get('registros', [])
                            
                            # Buscar el registro actualizado
                            registro_actualizado = None
                            for reg in registros_actualizados:
                                if reg.get('cedula') == cedula_test:
                                    registro_actualizado = reg
                                    break
                            
                            if registro_actualizado:
                                print(f"‚úÖ Registro encontrado despu√©s de actualizaci√≥n:")
                                print(f"   Hora inicio: {registro_actualizado.get('hora_inicio', 'No definida')}")
                                print(f"   Estado: {registro_actualizado.get('estado', 'No definido')}")
                                print(f"   Novedad: {registro_actualizado.get('novedad', 'No definida')}")
                                
                                # Verificar que los cambios se aplicaron
                                cambios_correctos = 0
                                if registro_actualizado.get('hora_inicio') == '14:30':
                                    print("   ‚úÖ Hora inicio actualizada correctamente")
                                    cambios_correctos += 1
                                else:
                                    print(f"   ‚ùå Hora inicio no se actualiz√≥: {registro_actualizado.get('hora_inicio')}")
                                
                                if registro_actualizado.get('estado') == 'CUMPLE':
                                    print("   ‚úÖ Estado actualizado correctamente")
                                    cambios_correctos += 1
                                else:
                                    print(f"   ‚ùå Estado no se actualiz√≥: {registro_actualizado.get('estado')}")
                                
                                if registro_actualizado.get('novedad') == 'Prueba de edici√≥n completa':
                                    print("   ‚úÖ Novedad actualizada correctamente")
                                    cambios_correctos += 1
                                else:
                                    print(f"   ‚ùå Novedad no se actualiz√≥: {registro_actualizado.get('novedad')}")
                                
                                print(f"\nüéØ Resultado final: {cambios_correctos}/3 cambios aplicados correctamente")
                                
                                if cambios_correctos == 3:
                                    print("üéâ ¬°FUNCIONALIDAD DE EDICI√ìN COMPLETAMENTE FUNCIONAL!")
                                else:
                                    print("‚ö†Ô∏è  Algunos cambios no se aplicaron correctamente")
                            else:
                                print("‚ùå No se encontr√≥ el registro despu√©s de la actualizaci√≥n")
                        else:
                            print(f"‚ùå Error en consulta de verificaci√≥n: {data.get('message')}")
                    else:
                        print(f"‚ùå Error en consulta de verificaci√≥n: {response.status_code}")
                
            else:
                print("‚ÑπÔ∏è  No hay registros de asistencia para hoy")
                print("   Puede crear algunos registros primero usando la funcionalidad de registro")
        else:
            print(f"‚ùå Error en respuesta: {data.get('message')}")
    else:
        print(f"‚ùå Error al consultar registros: {response.status_code}")

if __name__ == "__main__":
    test_frontend_complete()