#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar y crear el rol 'lider' en la base de datos
"""

import mysql.connector
from mysql.connector import Error

def crear_rol_lider():
    """Verificar y crear el rol 'lider' en la base de datos"""
    try:
        print("=== VERIFICANDO Y CREANDO ROL L√çDER ===")
        
        # Configuraci√≥n de conexi√≥n a la base de datos
        connection = mysql.connector.connect(
            host='localhost',
            database='capired',
            user='root',
            password='732137A031E4b@'
        )
        
        if connection.is_connected():
            cursor = connection.cursor(dictionary=True)
            
            # 1. Verificar si existe una tabla de roles
            print("1. Verificando estructura de roles...")
            cursor.execute("SHOW TABLES LIKE 'roles'")
            tabla_roles = cursor.fetchone()
            
            if tabla_roles:
                print("   ‚úÖ Tabla 'roles' encontrada")
                
                # Verificar si el rol 'lider' ya existe
                cursor.execute("SELECT * FROM roles WHERE id_roles = 7 OR nombre_rol = 'lider'")
                rol_existente = cursor.fetchone()
                
                if rol_existente:
                    print(f"   ‚úÖ Rol 'lider' ya existe: {rol_existente}")
                else:
                    print("   ‚ö†Ô∏è  Rol 'lider' no existe, cre√°ndolo...")
                    cursor.execute("""
                        INSERT INTO roles (id_roles, nombre_rol, descripcion) 
                        VALUES (7, 'lider', 'Rol de l√≠der con acceso al m√≥dulo de liderazgo')
                    """)
                    connection.commit()
                    print("   ‚úÖ Rol 'lider' creado exitosamente")
                    
            else:
                print("   ‚ö†Ô∏è  Tabla 'roles' no encontrada")
                print("   üìù Creando tabla 'roles'...")
                
                # Crear tabla roles
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS roles (
                        id_roles INT PRIMARY KEY,
                        nombre_rol VARCHAR(50) NOT NULL,
                        descripcion TEXT
                    )
                """)
                
                # Insertar roles b√°sicos
                roles_basicos = [
                    (1, 'administrativo', 'Rol administrativo con acceso completo'),
                    (2, 'tecnicos', 'Rol para t√©cnicos'),
                    (3, 'operativo', 'Rol operativo'),
                    (4, 'contabilidad', 'Rol de contabilidad'),
                    (5, 'logistica', 'Rol de log√≠stica'),
                    (6, 'analista', 'Rol de analista'),
                    (7, 'lider', 'Rol de l√≠der con acceso al m√≥dulo de liderazgo')
                ]
                
                cursor.executemany("""
                    INSERT IGNORE INTO roles (id_roles, nombre_rol, descripcion) 
                    VALUES (%s, %s, %s)
                """, roles_basicos)
                
                connection.commit()
                print("   ‚úÖ Tabla 'roles' y roles b√°sicos creados exitosamente")
            
            # 2. Verificar roles actuales
            print("\n2. Roles disponibles en la base de datos:")
            cursor.execute("SELECT * FROM roles ORDER BY id_roles")
            roles = cursor.fetchall()
            
            for rol in roles:
                print(f"   üé≠ ID: {rol['id_roles']} - Nombre: {rol['nombre_rol']} - Descripci√≥n: {rol.get('descripcion', 'N/A')}")
            
            # 3. Verificar usuarios con rol de l√≠der
            print("\n3. Verificando usuarios con rol de l√≠der...")
            cursor.execute("""
                SELECT recurso_operativo_cedula, nombre, estado 
                FROM recurso_operativo 
                WHERE id_roles = 7
            """)
            usuarios_lider = cursor.fetchall()
            
            if usuarios_lider:
                print(f"   üë• Encontrados {len(usuarios_lider)} usuarios con rol de l√≠der:")
                for usuario in usuarios_lider:
                    print(f"      - C√©dula: {usuario['recurso_operativo_cedula']}, Nombre: {usuario['nombre']}, Estado: {usuario['estado']}")
            else:
                print("   üìù No hay usuarios con rol de l√≠der asignado a√∫n")
                print("   üí° Puedes asignar este