#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar usuarios de log√≠stica y sus contrase√±as
"""

import mysql.connector
from mysql.connector import Error
import bcrypt

# Configuraci√≥n de la base de datos
db_config = {
    'host': 'localhost',
    'user': 'root',
    'password': '732137A031E4b@',
    'database': 'capired',
    'port': 3306
}

def verificar_usuarios_logistica():
    """
    Verifica los usuarios de log√≠stica disponibles
    """
    connection = None
    cursor = None
    
    try:
        print("üîç Conectando a la base de datos...")
        connection = mysql.connector.connect(**db_config)
        cursor = connection.cursor(dictionary=True)
        
        print("‚úÖ Conexi√≥n exitosa")
        print("\n" + "="*80)
        print("üë• VERIFICACI√ìN DE USUARIOS DE LOG√çSTICA")
        print("="*80)
        
        # Buscar usuarios con rol de log√≠stica (id_roles = 3)
        print("\n1Ô∏è‚É£ Buscando usuarios con rol de log√≠stica...")
        cursor.execute("""
            SELECT 
                id_codigo_consumidor,
                recurso_operativo_cedula,
                nombre,
                id_roles,
                estado,
                recurso_operativo_password
            FROM recurso_operativo 
            WHERE id_roles = 3
            ORDER BY nombre
        """)
        
        usuarios_logistica = cursor.fetchall()
        
        if not usuarios_logistica:
            print("‚ùå No se encontraron usuarios con rol de log√≠stica")
            return
        
        print(f"‚úÖ Se encontraron {len(usuarios_logistica)} usuarios con rol de log√≠stica:")
        print()
        
        for i, usuario in enumerate(usuarios_logistica, 1):
            print(f"üë§ Usuario {i}:")
            print(f"   üìã ID: {usuario['id_codigo_consumidor']}")
            print(f"   üÜî C√©dula: {usuario['recurso_operativo_cedula']}")
            print(f"   üë®‚Äçüíº Nombre: {usuario['nombre']}")
            print(f"   üé≠ Rol ID: {usuario['id_roles']}")
            print(f"   üìä Estado: {usuario['estado']}")
            
            # Verificar si la contrase√±a est√° hasheada
            password_hash = usuario['recurso_operativo_password']
            if password_hash:
                if isinstance(password_hash, str):
                    password_hash = password_hash.encode('utf-8')
                
                if password_hash.startswith(b'$2b$') or password_hash.startswith(b'$2a$'):
                    print(f"   üîê Contrase√±a: Hasheada con bcrypt ‚úÖ")
                    
                    # Probar contrase√±as comunes
                    contrase√±as_comunes = [
                        f"CE{usuario['recurso_operativo_cedula']}",  # Patr√≥n CE + c√©dula
                        usuario['recurso_operativo_cedula'],  # Solo la c√©dula
                        "123456",
                        "admin",
                        "password"
                    ]
                    
                    print(f"   üîç Probando contrase√±as comunes...")
                    for contrase√±a in contrase√±as_comunes:
                        try:
                            if bcrypt.checkpw(contrase√±a.encode('utf-8'), password_hash):
                                print(f"   ‚úÖ Contrase√±a encontrada: '{contrase√±a}'")
                                break
                        except Exception as e:
                            continue
                    else:
                        print(f"   ‚ùå No se encontr√≥ la contrase√±a entre las opciones comunes")
                else:
                    print(f"   üîê Contrase√±a: Texto plano - '{password_hash.decode('utf-8') if isinstance(password_hash, bytes) else password_hash}'")
            else:
                print(f"   üîê Contrase√±a: No definida")
            
            print()
        
        # Mostrar usuarios activos espec√≠ficamente
        print("\n2Ô∏è‚É£ Usuarios de log√≠stica ACTIVOS:")
        usuarios_activos = [u for u in usuarios_logistica if u['estado'] == 'Activo']
        
        if usuarios_activos:
            print(f"‚úÖ {len(usuarios_activos)} usuarios activos encontrados:")
            for usuario in usuarios_activos:
                print(f"   üë§ {usuario['nombre']} (C√©dula: {usuario['recurso_operativo_cedula']})")
        else:
            print("‚ùå No hay usuarios de log√≠stica activos")
        
        print("\n" + "="*80)
        print("üìã RESUMEN")
        print("="*80)
        print(f"Total usuarios log√≠stica: {len(usuarios_logistica)}")
        print(f"Usuarios activos: {len(usuarios_activos)}")
        print(f"Usuarios inactivos: {len(usuarios_logistica) - len(usuarios_activos)}")
        
        if usuarios_activos:
            print("\nüí° Para las pruebas, puedes usar cualquiera de estos usuarios activos:")
            for usuario in usuarios_activos[:3]:  # Mostrar m√°ximo 3
                print(f"   - C√©dula: {usuario['recurso_operativo_cedula']} | Nombre: {usuario['nombre']}")
        
        print("\n‚úÖ Verificaci√≥n completada")
        
    except Error as e:
        print(f"‚ùå Error de base de datos: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
    finally:
        if cursor:
            cursor.close()
        if connection and connection.is_connected():
            connection.close()
            print("\nüîå Conexi√≥n cerrada")

if __name__ == "__main__":
    verificar_usuarios_logistica()