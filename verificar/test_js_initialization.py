import requests
import re

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:8080"
LOGIN_URL = f"{BASE_URL}/"
ANALISTAS_URL = f"{BASE_URL}/analistas"

# Credenciales
USERNAME = "80833959"
PASSWORD = "M4r14l4r@"

def test_js_initialization():
    """Prueba la inicializaci√≥n del m√≥dulo JavaScript analistas"""
    print("="*60)
    print("DIAGN√ìSTICO FINAL - INICIALIZACI√ìN JAVASCRIPT")
    print("="*60)
    
    # Crear sesi√≥n
    session = requests.Session()
    
    print("\n[1] Realizando login...")
    try:
        session.get(LOGIN_URL)
        login_data = {"username": USERNAME, "password": PASSWORD}
        login_response = session.post(LOGIN_URL, data=login_data, allow_redirects=True)
        
        if "dashboard" in login_response.url or session.cookies.get('session'):
            print("   ‚úÖ Login exitoso")
        else:
            print("   ‚ùå Login fallido")
            return False
    except Exception as e:
        print(f"   ‚ùå Error en login: {e}")
        return False
    
    print("\n[2] Analizando HTML del m√≥dulo analistas...")
    try:
        response = session.get(ANALISTAS_URL)
        if response.status_code == 200:
            html_content = response.text
            print("   ‚úÖ HTML obtenido correctamente")
        else:
            print(f"   ‚ùå Error al obtener HTML: Status {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False
    
    print("\n[3] Verificando inicializaci√≥n JavaScript en HTML...")
    
    # Buscar patrones de inicializaci√≥n
    initialization_patterns = [
        (r'\$\(document\)\.ready\(function\(\)\s*\{', "$(document).ready"),
        (r'\$\(function\(\)\s*\{', "$(function()"),
        (r'document\.addEventListener\(["\']DOMContentLoaded["\']', "DOMContentLoaded"),
        (r'new\s+AnalistasModule', "new AnalistasModule"),
        (r'AnalistasModule\s*\(', "AnalistasModule()"),
        (r'analistas\.init', "analistas.init"),
        (r'window\.onload', "window.onload")
    ]
    
    found_patterns = []
    for pattern, description in initialization_patterns:
        if re.search(pattern, html_content, re.IGNORECASE):
            print(f"   ‚úÖ {description} encontrado")
            found_patterns.append(description)
        else:
            print(f"   ‚ùå {description} no encontrado")
    
    print(f"\n   Patrones de inicializaci√≥n encontrados: {len(found_patterns)}")
    
    print("\n[4] Analizando archivo analistas.js...")
    try:
        js_response = session.get(f"{BASE_URL}/static/js/analistas.js")
        if js_response.status_code == 200:
            js_content = js_response.text
            print("   ‚úÖ Archivo analistas.js obtenido")
            
            # Verificar estructura del m√≥dulo
            js_checks = [
                (r'class\s+AnalistasModule', "Definici√≥n de clase AnalistasModule"),
                (r'constructor\s*\(', "Constructor de la clase"),
                (r'init\s*\(', "M√©todo init"),
                (r'cargarDatos\s*\(', "M√©todo cargarDatos"),
                (r'cargarGrupos\s*\(', "M√©todo cargarGrupos"),
                (r'cargarAgrupaciones\s*\(', "M√©todo cargarAgrupaciones"),
                (r'aplicarFiltros\s*\(', "M√©todo aplicarFiltros"),
                (r'/api/analistas/causas-cierre', "URL del endpoint causas-cierre"),
                (r'/api/analistas/grupos', "URL del endpoint grupos"),
                (r'/api/analistas/agrupaciones', "URL del endpoint agrupaciones")
            ]
            
            js_found = 0
            for pattern, description in js_checks:
                if re.search(pattern, js_content, re.IGNORECASE):
                    print(f"   ‚úÖ {description}")
                    js_found += 1
                else:
                    print(f"   ‚ùå {description} no encontrado")
            
            print(f"\n   Elementos JS encontrados: {js_found}/{len(js_checks)}")
            
        else:
            print(f"   ‚ùå Error al obtener analistas.js: Status {js_response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error al analizar JS: {e}")
        return False
    
    print("\n[5] Verificando inicializaci√≥n espec√≠fica en HTML...")
    
    # Buscar la inicializaci√≥n espec√≠fica del m√≥dulo
    script_sections = re.findall(r'<script[^>]*>(.*?)</script>', html_content, re.DOTALL | re.IGNORECASE)
    
    initialization_found = False
    for i, script in enumerate(script_sections, 1):
        if 'analistas' in script.lower() or 'AnalistasModule' in script:
            print(f"   ‚úÖ Script {i} contiene referencias al m√≥dulo analistas")
            print(f"      Contenido: {script.strip()[:200]}...")
            initialization_found = True
    
    if not initialization_found:
        print("   ‚ùå No se encontr√≥ inicializaci√≥n espec√≠fica del m√≥dulo")
        
        # Buscar al final del HTML
        html_end = html_content[-1000:]  # √öltimos 1000 caracteres
        if 'analistas' in html_end.lower():
            print("   ‚ö†Ô∏è Referencias al m√≥dulo encontradas al final del HTML")
    
    print("\n[6] Verificando dependencias...")
    
    # Verificar jQuery
    if 'jquery' in html_content.lower():
        print("   ‚úÖ jQuery incluido")
        
        # Verificar versi√≥n de jQuery
        jquery_match = re.search(r'jquery[/-](\d+\.\d+\.\d+)', html_content, re.IGNORECASE)
        if jquery_match:
            print(f"   ‚úÖ Versi√≥n jQuery: {jquery_match.group(1)}")
    else:
        print("   ‚ùå jQuery no encontrado")
    
    # Verificar Bootstrap
    if 'bootstrap' in html_content.lower():
        print("   ‚úÖ Bootstrap incluido")
    else:
        print("   ‚ùå Bootstrap no encontrado")
    
    print("\n[7] Diagn√≥stico de problemas potenciales...")
    
    problems = []
    solutions = []
    
    # Verificar si hay inicializaci√≥n
    if len(found_patterns) == 0:
        problems.append("No se encontr√≥ inicializaci√≥n JavaScript")
        solutions.append("Agregar $(document).ready() o similar para inicializar el m√≥dulo")
    
    # Verificar si el m√≥dulo se instancia
    if not re.search(r'new\s+AnalistasModule|AnalistasModule\s*\(', html_content, re.IGNORECASE):
        problems.append("El m√≥dulo AnalistasModule no se instancia")
        solutions.append("Agregar 'const analistas = new AnalistasModule();' en el script")
    
    # Verificar si se llama init
    if not re.search(r'init\s*\(', html_content, re.IGNORECASE):
        problems.append("No se llama al m√©todo init del m√≥dulo")
        solutions.append("Agregar 'analistas.init();' despu√©s de instanciar el m√≥dulo")
    
    if problems:
        print("\n   ‚ùå Problemas encontrados:")
        for i, problem in enumerate(problems, 1):
            print(f"      {i}. {problem}")
        
        print("\n   üí° Soluciones sugeridas:")
        for i, solution in enumerate(solutions, 1):
            print(f"      {i}. {solution}")
    else:
        print("   ‚úÖ No se encontraron problemas obvios")
    
    print("\n[8] Recomendaci√≥n final...")
    
    if len(found_patterns) > 0 and js_found >= 8:
        print("   ‚úÖ El m√≥dulo parece estar correctamente configurado")
        print("   üí° Si los filtros no funcionan, verificar:")
        print("      - Errores en la consola del navegador")
        print("      - Permisos CORS")
        print("      - Autenticaci√≥n de sesi√≥n")
    else:
        print("   ‚ùå Hay problemas en la configuraci√≥n del m√≥dulo")
        print("   üí° Revisar la inicializaci√≥n JavaScript en el HTML")
    
    return True

def generate_fix_script():
    """Genera un script de correcci√≥n para el HTML"""
    print("\n" + "="*60)
    print("SCRIPT DE CORRECCI√ìN SUGERIDO")
    print("="*60)
    
    fix_script = '''
<!-- Agregar al final del HTML, antes de </body> -->
<script>
$(document).ready(function() {
    console.log('Inicializando m√≥dulo analistas...');
    
    // Verificar que AnalistasModule est√© disponible
    if (typeof AnalistasModule !== 'undefined') {
        try {
            // Instanciar el m√≥dulo
            const analistas = new AnalistasModule();
            
            // Inicializar
            analistas.init();
            
            console.log('M√≥dulo analistas inicializado correctamente');
        } catch (error) {
            console.error('Error al inicializar m√≥dulo analistas:', error);
        }
    } else {
        console.error('AnalistasModule no est√° definido. Verificar que analistas.js se haya cargado.');
    }
});
</script>
'''
    
    print(fix_script)
    
    return fix_script

if __name__ == "__main__":
    test_js_initialization()
    generate_fix_script()