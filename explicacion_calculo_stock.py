#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXPLICACI√ìN DEL C√ÅLCULO DE STOCK Y L√çMITES EN EL SISTEMA FERRETERO

Este script educativo explica paso a paso c√≥mo funciona el sistema de c√°lculo
de stock y l√≠mites para la asignaci√≥n de materiales a t√©cnicos ferreteros.

Autor: Sistema de Diagn√≥stico
Fecha: 2025
"""

import os
import mysql.connector
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

class ExplicacionCalculoStock:
    def __init__(self):
        self.conexion = None
        self.conectar_bd()
    
    def conectar_bd(self):
        """Conectar a la base de datos MySQL"""
        try:
            self.conexion = mysql.connector.connect(
                host=os.getenv('MYSQL_HOST', 'localhost'),
                port=int(os.getenv('MYSQL_PORT', 3306)),
                user=os.getenv('MYSQL_USER', 'root'),
                password=os.getenv('MYSQL_PASSWORD', ''),
                database=os.getenv('MYSQL_DB', 'synapsis')
            )
            print("‚úÖ Conexi√≥n a MySQL establecida correctamente")
        except Exception as e:
            print(f"‚ùå Error conectando a MySQL: {e}")
            self.conexion = None
    
    def explicar_tablas_involucradas(self):
        """
        PASO 1: EXPLICAR LAS TABLAS INVOLUCRADAS
        
        El sistema de stock involucra principalmente 3 tablas:
        """
        print("\n" + "="*80)
        print("PASO 1: TABLAS INVOLUCRADAS EN EL C√ÅLCULO DE STOCK")
        print("="*80)
        
        print("\nüìã 1. TABLA 'ferretero' - Registro de asignaciones")
        print("   - Almacena cada asignaci√≥n de material a un t√©cnico")
        print("   - Campos clave: cedula_tecnico, codigo_material, cantidad, fecha_asignacion")
        print("   - Cada registro representa una entrega de material")
        
        print("\nüìã 2. TABLA 'recurso_operativo' - Cat√°logo de materiales")
        print("   - Define los materiales disponibles y sus l√≠mites")
        print("   - Campos clave: codigo, descripcion, limite_area_*")
        print("   - Los l√≠mites var√≠an seg√∫n el √°rea de trabajo del t√©cnico")
        
        print("\nüìã 3. TABLA 'stock_general' - Inventario disponible")
        print("   - Controla la cantidad disponible de cada material")
        print("   - Campos clave: codigo_material, cantidad_disponible")
        print("   - Se actualiza autom√°ticamente con cada asignaci√≥n")
        
        if self.conexion:
            try:
                cursor = self.conexion.cursor()
                
                # Mostrar estructura de tabla ferretero
                print("\nüîç Estructura de tabla 'ferretero':")
                cursor.execute("DESCRIBE ferretero")
                for campo in cursor.fetchall():
                    print(f"   - {campo[0]}: {campo[1]}")
                
                # Mostrar estructura de tabla recurso_operativo
                print("\nüîç Estructura de tabla 'recurso_operativo':")
                cursor.execute("DESCRIBE recurso_operativo")
                for campo in cursor.fetchall():
                    if 'limite' in campo[0] or campo[0] in ['codigo', 'descripcion']:
                        print(f"   - {campo[0]}: {campo[1]}")
                
                cursor.close()
            except Exception as e:
                print(f"‚ùå Error consultando estructura: {e}")
    
    def explicar_limites_por_area(self):
        """
        PASO 2: EXPLICAR C√ìMO SE DETERMINAN LOS L√çMITES POR √ÅREA
        
        Los l√≠mites dependen del √°rea de trabajo del t√©cnico:
        - √Årea 1: limite_area_1
        - √Årea 2: limite_area_2  
        - √Årea 3: limite_area_3
        - √Årea 4: limite_area_4
        """
        print("\n" + "="*80)
        print("PASO 2: DETERMINACI√ìN DE L√çMITES POR √ÅREA DE TRABAJO")
        print("="*80)
        
        print("\nüéØ L√ìGICA DE L√çMITES:")
        print("   El sistema asigna l√≠mites diferentes seg√∫n el √°rea de trabajo del t√©cnico")
        print("   Cada material tiene 4 l√≠mites configurados (uno por √°rea)")
        
        if self.conexion:
            try:
                cursor = self.conexion.cursor()
                
                # Mostrar ejemplos de l√≠mites por material
                print("\nüìä EJEMPLOS DE L√çMITES POR MATERIAL:")
                query = """
                SELECT codigo, descripcion, 
                       limite_area_1, limite_area_2, limite_area_3, limite_area_4
                FROM recurso_operativo 
                WHERE limite_area_1 IS NOT NULL 
                LIMIT 5
                """
                cursor.execute(query)
                
                print(f"{'C√≥digo':<10} {'Descripci√≥n':<30} {'√Årea 1':<8} {'√Årea 2':<8} {'√Årea 3':<8} {'√Årea 4':<8}")
                print("-" * 80)
                
                for row in cursor.fetchall():
                    codigo, desc, l1, l2, l3, l4 = row
                    desc_corta = (desc[:27] + '...') if len(desc) > 30 else desc
                    print(f"{codigo:<10} {desc_corta:<30} {l1 or 0:<8} {l2 or 0:<8} {l3 or 0:<8} {l4 or 0:<8}")
                
                print("\nüí° INTERPRETACI√ìN:")
                print("   - Si un t√©cnico trabaja en √Årea 1, se aplica limite_area_1")
                print("   - Si trabaja en √Årea 2, se aplica limite_area_2, etc.")
                print("   - El l√≠mite define cu√°ntas unidades puede recibir en 15 d√≠as")
                
                cursor.close()
            except Exception as e:
                print(f"‚ùå Error consultando l√≠mites: {e}")
    
    def explicar_calculo_consumo_previo(self):
        """
        PASO 3: EXPLICAR EL C√ÅLCULO DE CONSUMO PREVIO
        
        El sistema calcula cu√°nto material ha recibido el t√©cnico
        en los √∫ltimos 15 d√≠as para el mismo material.
        """
        print("\n" + "="*80)
        print("PASO 3: C√ÅLCULO DE CONSUMO PREVIO (√öLTIMOS 15 D√çAS)")
        print("="*80)
        
        print("\nüìÖ L√ìGICA DE CONSUMO PREVIO:")
        print("   1. Se calcula la fecha l√≠mite: fecha_actual - 15 d√≠as")
        print("   2. Se buscan todas las asignaciones del t√©cnico para ese material")
        print("   3. Se suman las cantidades asignadas en ese per√≠odo")
        print("   4. Esta suma es el 'consumo previo'")
        
        fecha_actual = datetime.now()
        fecha_limite = fecha_actual - timedelta(days=15)
        
        print(f"\nüïí EJEMPLO DE C√ÅLCULO:")
        print(f"   Fecha actual: {fecha_actual.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   Fecha l√≠mite: {fecha_limite.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   Per√≠odo de an√°lisis: {fecha_limite.strftime('%Y-%m-%d')} a {fecha_actual.strftime('%Y-%m-%d')}")
        
        if self.conexion:
            try:
                cursor = self.conexion.cursor()
                
                # Mostrar ejemplo real de consumo previo
                print("\nüìä EJEMPLO REAL DE CONSUMO PREVIO:")
                query = """
                SELECT cedula_tecnico, codigo_material, 
                       SUM(cantidad) as consumo_total,
                       COUNT(*) as num_asignaciones,
                       MIN(fecha_asignacion) as primera_asignacion,
                       MAX(fecha_asignacion) as ultima_asignacion
                FROM ferretero 
                WHERE fecha_asignacion >= DATE_SUB(NOW(), INTERVAL 15 DAY)
                GROUP BY cedula_tecnico, codigo_material
                HAVING consumo_total > 0
                ORDER BY consumo_total DESC
                LIMIT 5
                """
                cursor.execute(query)
                
                print(f"{'T√©cnico':<12} {'Material':<12} {'Consumo':<8} {'Asign.':<6} {'Primera':<12} {'√öltima':<12}")
                print("-" * 70)
                
                for row in cursor.fetchall():
                    tecnico, material, consumo, asign, primera, ultima = row
                    print(f"{tecnico:<12} {material:<12} {consumo:<8} {asign:<6} {primera.strftime('%Y-%m-%d'):<12} {ultima.strftime('%Y-%m-%d'):<12}")
                
                cursor.close()
            except Exception as e:
                print(f"‚ùå Error consultando consumo previo: {e}")
    
    def explicar_validacion_limites(self):
        """
        PASO 4: EXPLICAR LA VALIDACI√ìN DE L√çMITES
        
        El sistema valida si la nueva asignaci√≥n exceder√≠a el l√≠mite permitido.
        """
        print("\n" + "="*80)
        print("PASO 4: VALIDACI√ìN DE L√çMITES")
        print("="*80)
        
        print("\nüîç PROCESO DE VALIDACI√ìN:")
        print("   1. Obtener el l√≠mite del material para el √°rea del t√©cnico")
        print("   2. Calcular el consumo previo (√∫ltimos 15 d√≠as)")
        print("   3. Sumar la cantidad solicitada al consumo previo")
        print("   4. Comparar el total con el l√≠mite permitido")
        
        print("\nüìê F√ìRMULA DE VALIDACI√ìN:")
        print("   (consumo_previo + cantidad_solicitada) <= limite_area")
        
        print("\n‚úÖ CASOS DE VALIDACI√ìN:")
        print("   - SI el total <= l√≠mite: APROBADO")
        print("   - SI el total > l√≠mite: RECHAZADO")
        
        # Ejemplo pr√°ctico
        print("\nüí° EJEMPLO PR√ÅCTICO:")
        print("   T√©cnico: 12345678 (√Årea 1)")
        print("   Material: CINTA_AISLA (l√≠mite_area_1 = 3)")
        print("   Consumo previo: 2 unidades")
        print("   Cantidad solicitada: 2 unidades")
        print("   Validaci√≥n: (2 + 2) = 4 > 3 ‚Üí RECHAZADO")
        print("   ")
        print("   Si solicitara 1 unidad:")
        print("   Validaci√≥n: (2 + 1) = 3 <= 3 ‚Üí APROBADO")
    
    def explicar_actualizacion_stock(self):
        """
        PASO 5: EXPLICAR LA ACTUALIZACI√ìN DE STOCK
        
        Cuando se aprueba una asignaci√≥n, se actualiza el stock disponible.
        """
        print("\n" + "="*80)
        print("PASO 5: ACTUALIZACI√ìN DE STOCK")
        print("="*80)
        
        print("\nüì¶ PROCESO DE ACTUALIZACI√ìN:")
        print("   1. Se registra la asignaci√≥n en tabla 'ferretero'")
        print("   2. Se activa el trigger 'actualizar_stock_asignacion'")
        print("   3. El trigger reduce el stock en tabla 'stock_general'")
        print("   4. Se verifica que el stock no quede negativo")
        
        print("\nüîß TRIGGER 'actualizar_stock_asignacion':")
        print("   - Se ejecuta AFTER INSERT ON ferretero")
        print("   - Reduce stock_general.cantidad_disponible")
        print("   - F√≥rmula: cantidad_disponible = cantidad_disponible - NEW.cantidad")
        
        if self.conexion:
            try:
                cursor = self.conexion.cursor()
                
                # Verificar si existe el trigger
                print("\nüîç VERIFICACI√ìN DEL TRIGGER:")
                cursor.execute("""
                    SELECT TRIGGER_NAME, EVENT_MANIPULATION, EVENT_OBJECT_TABLE 
                    FROM information_schema.TRIGGERS 
                    WHERE TRIGGER_SCHEMA = DATABASE() 
                    AND TRIGGER_NAME = 'actualizar_stock_asignacion'
                """)
                
                trigger = cursor.fetchone()
                if trigger:
                    print(f"   ‚úÖ Trigger encontrado: {trigger[0]}")
                    print(f"   üìã Evento: {trigger[1]} en tabla {trigger[2]}")
                else:
                    print("   ‚ùå TRIGGER NO ENCONTRADO - PROBLEMA CR√çTICO")
                    print("   üö® Sin este trigger, el stock no se actualiza autom√°ticamente")
                
                # Mostrar estado actual del stock
                print("\nüìä ESTADO ACTUAL DEL STOCK (primeros 5):")
                cursor.execute("""
                    SELECT codigo_material, cantidad_disponible 
                    FROM stock_general 
                    WHERE cantidad_disponible > 0 
                    ORDER BY cantidad_disponible DESC 
                    LIMIT 5
                """)
                
                print(f"{'Material':<15} {'Stock Disponible':<15}")
                print("-" * 30)
                
                for row in cursor.fetchall():
                    material, stock = row
                    print(f"{material:<15} {stock:<15}")
                
                cursor.close()
            except Exception as e:
                print(f"‚ùå Error verificando trigger/stock: {e}")
    
    def mostrar_flujo_completo(self):
        """
        PASO 6: MOSTRAR EL FLUJO COMPLETO CON EJEMPLO REAL
        
        Simular una asignaci√≥n completa paso a paso.
        """
        print("\n" + "="*80)
        print("PASO 6: FLUJO COMPLETO DE ASIGNACI√ìN")
        print("="*80)
        
        print("\nüîÑ FLUJO PASO A PASO:")
        
        # Datos de ejemplo
        cedula_tecnico = "12345678"
        codigo_material = "CINTA_AISLA"
        cantidad_solicitada = 1
        area_trabajo = 1
        
        print(f"\nüìù DATOS DE LA SOLICITUD:")
        print(f"   T√©cnico: {cedula_tecnico}")
        print(f"   Material: {codigo_material}")
        print(f"   Cantidad: {cantidad_solicitada}")
        print(f"   √Årea de trabajo: {area_trabajo}")
        
        if self.conexion:
            try:
                cursor = self.conexion.cursor()
                
                # Paso 1: Obtener l√≠mite del material
                print(f"\nüéØ PASO 1: Obtener l√≠mite para √°rea {area_trabajo}")
                cursor.execute(f"""
                    SELECT limite_area_{area_trabajo}, descripcion 
                    FROM recurso_operativo 
                    WHERE codigo = %s
                """, (codigo_material,))
                
                resultado = cursor.fetchone()
                if resultado:
                    limite, descripcion = resultado
                    print(f"   Material: {descripcion}")
                    print(f"   L√≠mite para √°rea {area_trabajo}: {limite} unidades")
                else:
                    print(f"   ‚ùå Material {codigo_material} no encontrado")
                    return
                
                # Paso 2: Calcular consumo previo
                print(f"\nüìÖ PASO 2: Calcular consumo previo (√∫ltimos 15 d√≠as)")
                cursor.execute("""
                    SELECT COALESCE(SUM(cantidad), 0) as consumo_previo
                    FROM ferretero 
                    WHERE cedula_tecnico = %s 
                    AND codigo_material = %s 
                    AND fecha_asignacion >= DATE_SUB(NOW(), INTERVAL 15 DAY)
                """, (cedula_tecnico, codigo_material))
                
                consumo_previo = cursor.fetchone()[0]
                print(f"   Consumo previo: {consumo_previo} unidades")
                
                # Paso 3: Validar l√≠mite
                print(f"\nüîç PASO 3: Validar l√≠mite")
                total_consumo = consumo_previo + cantidad_solicitada
                print(f"   C√°lculo: {consumo_previo} + {cantidad_solicitada} = {total_consumo}")
                print(f"   L√≠mite: {limite}")
                
                if total_consumo <= limite:
                    print(f"   ‚úÖ APROBADO: {total_consumo} <= {limite}")
                    
                    # Paso 4: Verificar stock disponible
                    print(f"\nüì¶ PASO 4: Verificar stock disponible")
                    cursor.execute("""
                        SELECT cantidad_disponible 
                        FROM stock_general 
                        WHERE codigo_material = %s
                    """, (codigo_material,))
                    
                    stock_resultado = cursor.fetchone()
                    if stock_resultado:
                        stock_disponible = stock_resultado[0]
                        print(f"   Stock disponible: {stock_disponible} unidades")
                        
                        if stock_disponible >= cantidad_solicitada:
                            print(f"   ‚úÖ Stock suficiente: {stock_disponible} >= {cantidad_solicitada}")
                            print(f"\nüéâ ASIGNACI√ìN APROBADA")
                            print(f"   - Se registrar√≠a en tabla 'ferretero'")
                            print(f"   - El trigger reducir√≠a el stock a {stock_disponible - cantidad_solicitada}")
                        else:
                            print(f"   ‚ùå Stock insuficiente: {stock_disponible} < {cantidad_solicitada}")
                    else:
                        print(f"   ‚ùå Material no encontrado en stock")
                else:
                    print(f"   ‚ùå RECHAZADO: {total_consumo} > {limite}")
                    print(f"   üí° El t√©cnico ya alcanz√≥ su l√≠mite de {limite} unidades")
                
                cursor.close()
            except Exception as e:
                print(f"‚ùå Error en simulaci√≥n: {e}")
    
    def mostrar_dependencias_criticas(self):
        """
        PASO 7: EXPLICAR DEPENDENCIAS CR√çTICAS DEL SISTEMA
        
        Identificar qu√© componentes son esenciales para el funcionamiento.
        """
        print("\n" + "="*80)
        print("PASO 7: DEPENDENCIAS CR√çTICAS DEL SISTEMA")
        print("="*80)
        
        print("\nüîß COMPONENTES ESENCIALES:")
        
        print("\n1Ô∏è‚É£ TRIGGER 'actualizar_stock_asignacion':")
        print("   - CR√çTICO: Sin √©l, el stock no se actualiza")
        print("   - Ubicaci√≥n: Base de datos MySQL")
        print("   - Funci√≥n: Reduce stock autom√°ticamente")
        
        print("\n2Ô∏è‚É£ CONFIGURACI√ìN DE ZONA HORARIA:")
        print("   - IMPORTANTE: Afecta c√°lculos de fechas")
        print("   - Python debe coincidir con MySQL")
        print("   - Recomendaci√≥n: Usar UTC")
        
        print("\n3Ô∏è‚É£ VARIABLES DE ENTORNO:")
        print("   - MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD")
        print("   - MYSQL_DB, MYSQL_PORT")
        print("   - Deben estar correctamente configuradas")
        
        print("\n4Ô∏è‚É£ PERMISOS DE BASE DE DATOS:")
        print("   - SELECT, INSERT en tabla 'ferretero'")
        print("   - SELECT, UPDATE en tabla 'stock_general'")
        print("   - SELECT en tabla 'recurso_operativo'")
        
        print("\n5Ô∏è‚É£ INTEGRIDAD DE DATOS:")
        print("   - L√≠mites configurados en 'recurso_operativo'")
        print("   - Stock inicial en 'stock_general'")
        print("   - √Åreas de trabajo v√°lidas (1-4)")
        
        if self.conexion:
            try:
                cursor = self.conexion.cursor()
                
                print("\nüîç VERIFICACI√ìN DE DEPENDENCIAS:")
                
                # Verificar trigger
                cursor.execute("""
                    SELECT COUNT(*) FROM information_schema.TRIGGERS 
                    WHERE TRIGGER_SCHEMA = DATABASE() 
                    AND TRIGGER_NAME = 'actualizar_stock_asignacion'
                """)
                trigger_existe = cursor.fetchone()[0] > 0
                print(f"   Trigger actualizar_stock_asignacion: {'‚úÖ OK' if trigger_existe else '‚ùå FALTA'}")
                
                # Verificar tablas
                tablas = ['ferretero', 'recurso_operativo', 'stock_general']
                for tabla in tablas:
                    cursor.execute(f"SELECT COUNT(*) FROM {tabla}")
                    count = cursor.fetchone()[0]
                    print(f"   Tabla {tabla}: {'‚úÖ OK' if count > 0 else '‚ö†Ô∏è VAC√çA'} ({count} registros)")
                
                cursor.close()
            except Exception as e:
                print(f"‚ùå Error verificando dependencias: {e}")
    
    def generar_recomendaciones(self):
        """
        PASO 8: GENERAR RECOMENDACIONES PARA OPTIMIZACI√ìN
        
        Sugerir mejoras y verificaciones para el sistema.
        """
        print("\n" + "="*80)
        print("PASO 8: RECOMENDACIONES PARA OPTIMIZACI√ìN")
        print("="*80)
        
        print("\nüí° RECOMENDACIONES INMEDIATAS:")
        
        print("\nüîß 1. VERIFICAR TRIGGER:")
        print("   - Confirmar que 'actualizar_stock_asignacion' existe")
        print("   - Verificar que se ejecuta correctamente")
        print("   - Probar con una asignaci√≥n de prueba")
        
        print("\nüïí 2. SINCRONIZAR ZONA HORARIA:")
        print("   - Configurar Python y MySQL en UTC")
        print("   - Verificar que NOW() y datetime.now() coinciden")
        print("   - Usar TIMESTAMP en lugar de DATETIME")
        
        print("\nüìä 3. MONITOREO Y LOGGING:")
        print("   - Implementar logging detallado en registrar_ferretero()")
        print("   - Registrar cada paso del c√°lculo")
        print("   - Alertas cuando se rechacen asignaciones")
        
        print("\nüîí 4. VALIDACIONES ADICIONALES:")
        print("   - Verificar que el t√©cnico existe")
        print("   - Validar que el material est√° activo")
        print("   - Confirmar que el √°rea de trabajo es v√°lida (1-4)")
        
        print("\n‚ö° 5. OPTIMIZACI√ìN DE RENDIMIENTO:")
        print("   - √çndices en (cedula_tecnico, codigo_material, fecha_asignacion)")
        print("   - Cach√© de l√≠mites por √°rea")
        print("   - Consultas preparadas para c√°lculos frecuentes")
        
        print("\nüîÑ 6. MANTENIMIENTO:")
        print("   - Limpieza peri√≥dica de registros antiguos")
        print("   - Backup regular de configuraciones")
        print("   - Auditor√≠a de cambios en l√≠mites")
    
    def ejecutar_explicacion_completa(self):
        """
        Ejecutar toda la explicaci√≥n paso a paso
        """
        print("üéì EXPLICACI√ìN COMPLETA DEL C√ÅLCULO DE STOCK Y L√çMITES")
        print("üìö Sistema Ferretero - Gesti√≥n de Materiales")
        print("‚è∞ Fecha:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        
        try:
            self.explicar_tablas_involucradas()
            self.explicar_limites_por_area()
            self.explicar_calculo_consumo_previo()
            self.explicar_validacion_limites()
            self.explicar_actualizacion_stock()
            self.mostrar_flujo_completo()
            self.mostrar_dependencias_criticas()
            self.generar_recomendaciones()
            
            print("\n" + "="*80)
            print("üéâ EXPLICACI√ìN COMPLETADA EXITOSAMENTE")
            print("="*80)
            print("\nüìã RESUMEN:")
            print("   ‚úÖ Tablas y estructura explicadas")
            print("   ‚úÖ L√≥gica de l√≠mites por √°rea")
            print("   ‚úÖ C√°lculo de consumo previo")
            print("   ‚úÖ Proceso de validaci√≥n")
            print("   ‚úÖ Actualizaci√≥n de stock")
            print("   ‚úÖ Flujo completo simulado")
            print("   ‚úÖ Dependencias cr√≠ticas identificadas")
            print("   ‚úÖ Recomendaciones generadas")
            
        except Exception as e:
            print(f"\n‚ùå Error durante la explicaci√≥n: {e}")
        finally:
            if self.conexion:
                self.conexion.close()
                print("\nüîå Conexi√≥n a base de datos cerrada")

def main():
    """
    Funci√≥n principal para ejecutar la explicaci√≥n
    """
    print("Iniciando explicaci√≥n del c√°lculo de stock...")
    explicacion = ExplicacionCalculoStock()
    explicacion.ejecutar_explicacion_completa()

if __name__ == "__main__":
    main()