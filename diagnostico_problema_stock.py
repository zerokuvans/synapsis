#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico completo del problema de c√°lculo de stock
Analiza las diferencias entre local y producci√≥n
"""

import mysql.connector
import os
from datetime import datetime
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de base de datos
DB_CONFIG = {
    'host': os.getenv('MYSQL_HOST', 'localhost'),
    'port': int(os.getenv('MYSQL_PORT', 3306)),
    'user': os.getenv('MYSQL_USER', 'root'),
    'password': os.getenv('MYSQL_PASSWORD', ''),
    'database': os.getenv('MYSQL_DB', 'capired'),
    'charset': 'utf8mb4',
    'collation': 'utf8mb4_unicode_ci'
}

def main():
    connection = None
    try:
        print(f"üîç DIAGN√ìSTICO COMPLETO DEL PROBLEMA DE STOCK - {datetime.now()}")
        print(f"{'='*80}")
        
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor(dictionary=True)
        
        print("\nüìã RESUMEN DEL PROBLEMA IDENTIFICADO:")
        print("="*50)
        
        # 1. Problema principal identificado
        print("\nüö® PROBLEMA PRINCIPAL:")
        print("   La tabla 'dotaciones' est√° VAC√çA (0 registros)")
        print("   Esto causa que el c√°lculo de stock no funcione correctamente")
        
        # 2. Estructura de la tabla dotaciones
        print("\nüèóÔ∏è  ESTRUCTURA ACTUAL DE LA TABLA DOTACIONES:")
        cursor.execute("DESCRIBE dotaciones")
        estructura = cursor.fetchall()
        for campo in estructura:
            print(f"   - {campo['Field']}: {campo['Type']}")
        
        # 3. Verificar tabla recurso_operativo (referenciada por FK)
        print("\nüîó VERIFICANDO TABLA RECURSO_OPERATIVO (FK):")
        cursor.execute("SHOW TABLES LIKE 'recurso_operativo'")
        recurso_existe = cursor.fetchone()
        
        if recurso_existe:
            cursor.execute("SELECT COUNT(*) as total FROM recurso_operativo")
            total_recursos = cursor.fetchone()['total']
            print(f"   ‚úÖ Tabla existe con {total_recursos} registros")
            
            if total_recursos > 0:
                cursor.execute("SELECT * FROM recurso_operativo LIMIT 3")
                recursos = cursor.fetchall()
                print("   üìÑ Ejemplos de recursos operativos:")
                for recurso in recursos:
                    print(f"      - ID: {recurso.get('id_codigo_consumidor')}, Datos: {dict(recurso)}")
        else:
            print("   ‚ùå Tabla recurso_operativo NO EXISTE")
        
        # 4. Verificar ingresos_dotaciones
        print("\nüì¶ VERIFICANDO INGRESOS DE DOTACIONES:")
        cursor.execute("SHOW TABLES LIKE 'ingresos_dotaciones'")
        ingresos_existe = cursor.fetchone()
        
        if ingresos_existe:
            cursor.execute("SELECT COUNT(*) as total FROM ingresos_dotaciones")
            total_ingresos = cursor.fetchone()['total']
            print(f"   ‚úÖ Tabla existe con {total_ingresos} registros")
            
            if total_ingresos > 0:
                cursor.execute("SELECT tipo_elemento, SUM(cantidad) as total FROM ingresos_dotaciones GROUP BY tipo_elemento")
                ingresos_por_tipo = cursor.fetchall()
                print("   üìä Ingresos por tipo de elemento:")
                for ingreso in ingresos_por_tipo:
                    print(f"      - {ingreso['tipo_elemento']}: {ingreso['total']} unidades")
        else:
            print("   ‚ùå Tabla ingresos_dotaciones NO EXISTE")
        
        # 5. An√°lisis del problema de c√°lculo
        print("\nüßÆ AN√ÅLISIS DEL C√ÅLCULO DE STOCK:")
        print("   F√≥rmula actual: stock_inicial - total_asignaciones - total_cambios")
        print("   \n   PROBLEMA IDENTIFICADO:")
        print("   - stock_inicial viene de 'stock_ferretero' (materiales t√©cnicos)")
        print("   - total_asignaciones viene de 'dotaciones' (VAC√çA)")
        print("   - total_cambios viene de 'cambios_dotacion'")
        print("   \n   RESULTADO: Como 'dotaciones' est√° vac√≠a, total_asignaciones = 0")
        print("   Esto hace que el stock calculado sea incorrecto")
        
        # 6. Verificar diferencias entre tablas
        print("\nüîç DIFERENCIAS ENTRE SISTEMAS:")
        print("   STOCK_FERRETERO (materiales t√©cnicos):")
        cursor.execute("SELECT material_tipo, cantidad_disponible FROM stock_ferretero")
        stock_ferretero = cursor.fetchall()
        for item in stock_ferretero:
            print(f"      - {item['material_tipo']}: {item['cantidad_disponible']}")
        
        print("   \n   INGRESOS_DOTACIONES (dotaciones de vestimenta):")
        if ingresos_existe:
            cursor.execute("SELECT tipo_elemento, SUM(cantidad) as total FROM ingresos_dotaciones GROUP BY tipo_elemento")
            ingresos = cursor.fetchall()
            for item in ingresos:
                print(f"      - {item['tipo_elemento']}: {item['total']}")
        
        # 7. Propuesta de soluci√≥n
        print("\nüí° PROPUESTA DE SOLUCI√ìN:")
        print("="*40)
        print("\n1Ô∏è‚É£ PROBLEMA DE DATOS:")
        print("   - La tabla 'dotaciones' necesita datos")
        print("   - Verificar por qu√© no se est√°n insertando dotaciones")
        print("   - Revisar el proceso de asignaci√≥n de dotaciones")
        
        print("\n2Ô∏è‚É£ PROBLEMA DE ESTRUCTURA:")
        print("   - Hay inconsistencia entre tipos de materiales:")
        print("     * stock_ferretero: materiales t√©cnicos (silicona, amarres, etc.)")
        print("     * dotaciones: vestimenta (pantal√≥n, camiseta, etc.)")
        print("     * ingresos_dotaciones: vestimenta (pantal√≥n, camiseta, etc.)")
        
        print("\n3Ô∏è‚É£ SOLUCI√ìN RECOMENDADA:")
        print("   A. Separar los c√°lculos por tipo de material:")
        print("      - Materiales t√©cnicos: usar solo stock_ferretero")
        print("      - Vestimenta: usar ingresos_dotaciones - dotaciones - cambios")
        print("   B. Poblar la tabla dotaciones con datos de prueba")
        print("   C. Verificar el proceso de inserci√≥n en producci√≥n")
        
        # 8. Script de prueba para insertar datos
        print("\nüß™ GENERANDO DATOS DE PRUEBA:")
        try:
            # Verificar si hay recursos operativos
            cursor.execute("SELECT id_codigo_consumidor FROM recurso_operativo LIMIT 1")
            recurso = cursor.fetchone()
            
            if recurso:
                id_recurso = recurso['id_codigo_consumidor']
                print(f"   ‚úÖ Usando recurso operativo ID: {id_recurso}")
                
                # Insertar una dotaci√≥n de prueba
                cursor.execute("""
                    INSERT INTO dotaciones 
                    (cliente, id_codigo_consumidor, pantalon, camisetagris, guerrera, 
                     camisetapolo, botas, guantes_nitrilo, guantes_carnaza, gafas, 
                     gorra, casco, fecha_registro) 
                    VALUES 
                    ('CLIENTE_PRUEBA', %s, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, NOW())
                """, (id_recurso,))
                
                connection.commit()
                print("   ‚úÖ Dotaci√≥n de prueba insertada exitosamente")
                
                # Verificar la inserci√≥n
                cursor.execute("SELECT COUNT(*) as total FROM dotaciones")
                nuevo_total = cursor.fetchone()['total']
                print(f"   üìä Nuevo total de dotaciones: {nuevo_total}")
                
            else:
                print("   ‚ùå No hay recursos operativos disponibles para crear dotaci√≥n")
                
        except Exception as e:
            print(f"   ‚ùå Error insertando datos de prueba: {e}")
            connection.rollback()
        
    except Exception as e:
        print(f"‚ùå Error en diagn√≥stico: {e}")
    finally:
        if connection:
            connection.close()
        
        print(f"\n{'='*80}")
        print(f"‚úÖ DIAGN√ìSTICO COMPLETADO - {datetime.now()}")
        print(f"\nüìã RESUMEN:")
        print(f"   - Problema identificado: Tabla dotaciones vac√≠a")
        print(f"   - Causa: Falta de datos o proceso de inserci√≥n defectuoso")
        print(f"   - Soluci√≥n: Poblar tabla y verificar proceso en producci√≥n")
        print(f"{'='*80}")

if __name__ == '__main__':
    main()