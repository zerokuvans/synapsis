import requests
import json

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:8080"
LOGIN_URL = f"{BASE_URL}/"

# Credenciales administrativas
USERNAME = "80833959"
PASSWORD = "M4r14l4r@"

def test_edicion_tecnico_11():
    """Probar la edici√≥n del t√©cnico 11 y verificar que el analista se muestre correctamente"""
    print("="*60)
    print("PRUEBA DE EDICI√ìN DEL T√âCNICO 11")
    print("="*60)
    
    # Crear sesi√≥n
    session = requests.Session()
    
    print("\n[1] Realizando login...")
    try:
        # Obtener p√°gina de login primero
        session.get(LOGIN_URL)
        
        # Datos de login
        login_data = {
            "username": USERNAME,
            "password": PASSWORD
        }
        
        # Headers para simular una petici√≥n AJAX
        headers = {
            "X-Requested-With": "XMLHttpRequest",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        # Realizar login
        login_response = session.post(LOGIN_URL, data=login_data, headers=headers, allow_redirects=True)
        
        # Verificar login
        if "dashboard" in login_response.url or session.cookies.get('session'):
            print("   ‚úÖ Login exitoso")
        else:
            print("   ‚ùå Login fallido")
            print(f"   URL actual: {login_response.url}")
            print(f"   Status: {login_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error en login: {e}")
        return False
    
    # Probar endpoint /obtener_usuario/11
    print("\n[2] Probando endpoint /obtener_usuario/11...")
    try:
        response = session.get(f"{BASE_URL}/obtener_usuario/11")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"   ‚úÖ Status: 200 - Datos obtenidos correctamente")
                print(f"   üìã Datos del t√©cnico:")
                print(f"      ID: {data.get('id_codigo_consumidor')}")
                print(f"      Nombre: {data.get('nombre')}")
                print(f"      C√©dula: {data.get('recurso_operativo_cedula')}")
                print(f"      Cargo: {data.get('cargo')}")
                print(f"      Analista: '{data.get('analista')}'")
                
                # Verificar que el analista est√© asignado
                if data.get('analista') == 'ESPITIA BARON LICED JOANA':
                    print(f"   ‚úÖ Analista correctamente asignado: {data.get('analista')}")
                    return True
                else:
                    print(f"   ‚ùå Analista no asignado o incorrecto: '{data.get('analista')}'")
                    return False
                    
            except json.JSONDecodeError:
                print(f"   ‚ùå Respuesta no es JSON v√°lido")
                print(f"   Primeros 200 caracteres: {response.text[:200]}...")
                return False
        else:
            print(f"   ‚ùå Status: {response.status_code}")
            print(f"   Error: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error al consultar endpoint: {e}")
        return False
    
    # Probar endpoint /api/analistas
    print("\n[3] Probando endpoint /api/analistas...")
    try:
        response = session.get(f"{BASE_URL}/api/analistas")
        
        if response.status_code == 200:
            try:
                data = response.json()
                if data.get('success'):
                    analistas = data.get('analistas', [])
                    print(f"   ‚úÖ Status: 200 - {len(analistas)} analistas disponibles")
                    
                    # Buscar a ESPITIA BARON LICED JOANA
                    espitia_encontrada = False
                    for analista in analistas:
                        if analista.get('nombre') == 'ESPITIA BARON LICED JOANA':
                            espitia_encontrada = True
                            print(f"   ‚úÖ ESPITIA BARON LICED JOANA encontrada en la lista:")
                            print(f"      ID: {analista.get('id_codigo_consumidor')}")
                            print(f"      Nombre: {analista.get('nombre')}")
                            print(f"      C√©dula: {analista.get('recurso_operativo_cedula')}")
                            break
                    
                    if not espitia_encontrada:
                        print(f"   ‚ùå ESPITIA BARON LICED JOANA NO encontrada en la lista de analistas")
                        print(f"   üìã Analistas disponibles:")
                        for analista in analistas:
                            print(f"      - {analista.get('nombre')} (ID: {analista.get('id_codigo_consumidor')})")
                else:
                    print(f"   ‚ùå Error en la respuesta: {data.get('message', 'Sin mensaje')}")
                    
            except json.JSONDecodeError:
                print(f"   ‚ùå Respuesta no es JSON v√°lido")
                print(f"   Primeros 200 caracteres: {response.text[:200]}...")
        else:
            print(f"   ‚ùå Status: {response.status_code}")
            print(f"   Error: {response.text[:200]}...")
            
    except Exception as e:
        print(f"   ‚ùå Error al consultar endpoint: {e}")

def mostrar_resumen():
    """Mostrar resumen de la soluci√≥n"""
    print("\n" + "="*60)
    print("RESUMEN DE LA SOLUCI√ìN")
    print("="*60)
    print("\nüîç PROBLEMA IDENTIFICADO:")
    print("   El t√©cnico ALARCON SALAS LUIS HERNANDO (ID 11) no ten√≠a analista")
    print("   asignado en la base de datos, por lo que el campo 'analista' en")
    print("   el formulario de edici√≥n aparec√≠a vac√≠o.")
    
    print("\n‚úÖ SOLUCI√ìN IMPLEMENTADA:")
    print("   1. Se asign√≥ ESPITIA BARON LICED JOANA como analista del t√©cnico")
    print("   2. Se verific√≥ que el endpoint /obtener_usuario/11 devuelve el analista")
    print("   3. Se confirm√≥ que el endpoint /api/analistas incluye a la analista")
    print("   4. La funci√≥n establecerValorDropdown ahora puede preseleccionar correctamente")
    
    print("\nüéØ RESULTADO:")
    print("   El formulario de edici√≥n del t√©cnico ahora deber√≠a mostrar")
    print("   a ESPITIA BARON LICED JOANA como analista preseleccionada.")
    
    print("\nüìã ARCHIVOS MODIFICADOS:")
    print("   - Base de datos: tabla recurso_operativo (campo analista)")
    print("   - Scripts creados: asignar_analista_tecnico_11.py, verificar_tecnico_11.py")

if __name__ == "__main__":
    resultado = test_edicion_tecnico_11()
    mostrar_resumen()
    
    if resultado:
        print("\nüéâ ¬°PRUEBA EXITOSA! El problema ha sido resuelto.")
    else:
        print("\n‚ö†Ô∏è  Verificar manualmente el formulario de edici√≥n.")